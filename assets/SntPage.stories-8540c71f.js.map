{"version":3,"file":"SntPage.stories-8540c71f.js","sources":["../../src/utils/FormStore/FormStore.js","../../src/store/international/sntPageStore/SntListFilterStore/SntListFilterStore.js","../../src/store/international/sntPageStore/SntListSortingStore/SntListSortingStore.js","../../src/store/international/sntPageStore/SntListStore/SntListItemStore/SntNumberInputStore/SntNumberInputStore.js","../../src/store/international/sntPageStore/SntListStore/SntListItemStore/SntListItemStore.js","../../src/store/international/sntPageStore/SntListStore/SntListStore.js","../../src/store/international/sntPageStore/SntPageStore.js","../../src/components/common/Divider/index.jsx","../../node_modules/react-intersection-observer/react-intersection-observer.modern.mjs","../../src/components/international/SntPage/LoaderOrGetMore/LoaderOrGetMore.jsx","../../src/components/common/CopyButton/CopyButton.jsx","../../src/components/international/SntPage/SntList/SntNumberInput/SntNumberInput.jsx","../../src/components/international/SntPage/SntList/SntListDesktop/TableSortButton/TableSortButton.jsx","../../src/components/international/SntPage/SntList/SntListDesktop/SntListDesktop.jsx","../../src/components/international/SntPage/SntList/SntListMobile/SntListMobile.jsx","../../src/components/international/SntPage/SntList/SntList.jsx","../../src/components/international/SntPage/SntPage.jsx"],"sourcesContent":["import { makeAutoObservable } from 'mobx'\n\nexport class FormStore {\n  /** @type {{ [key:string]:any }} Объект с хранимыми значениями*/\n  values = {}\n  /** @type {{ [key:string]:string | null }} Объект с ошибками значений*/\n  errors = {}\n\n  /** @param initialValues {{ [key:string]:any }}\n   * @param validators {{[p:string]:function(value:string):(null|string|{errorMessageKey: string, params: {[p:string]: any}})[]}}\n   */\n  constructor(initialValues, validators = {}) {\n    this.values = initialValues\n    this.validators = validators\n    this.formForReset = JSON.parse(JSON.stringify(initialValues))\n    makeAutoObservable(this)\n  }\n\n  /** @param value {any} Новое значение\n   * @param key {string} Ключ значения в объекте */\n  changeValue = (value, key = '') => {\n    this.values[key] = value\n    this.validate(key)\n  }\n\n  /** @param key {string}  если передать ключ то сбросится только значение и ошибка по ключу, если не передавать сбросятся все значения и ошибки*/\n  reset = (key = '') => {\n    if (key) {\n      this.resetByKey(key)\n    } else {\n      Object.keys(this.values).forEach((key) => {\n        this.resetByKey(key)\n      })\n    }\n  }\n\n  /** @param key {string} сбросится только значение и ошибка по ключу*/\n  resetByKey = (key) => {\n    this.values[key] =\n      typeof this.formForReset[key] !== undefined\n        ? this.formForReset[key]\n        : null\n    this.errors[key] = null\n  }\n\n  /** @param obj {{[key:string]:any}} Перетирает значения в values на переданный объект оставляя старые значения если не был передано значения с существующим ключом */\n  setForm = (obj = {}) => {\n    Object.entries(obj).forEach(([key, value]) => {\n      this.values[key] = value\n    })\n  }\n\n  /** @param key {string} Запускает валидацию. Если ключ передан валидирует только одно значение, если не не передан валидирует все значения */\n  validate = (key = '') => {\n    if (key) {\n      return this.validateByKey(key)\n    } else {\n      const keys = []\n      Object.keys(this.validators).forEach((key) => {\n        if (!keys.includes(key)) keys.push(key)\n      })\n      Object.keys(this.values).forEach((key) => {\n        if (!keys.includes(key)) keys.push(key)\n      })\n      return keys.forEach((k) => this.validateByKey(k))\n    }\n  }\n\n  getValuesExcludeByKey = (key) => {\n    const otherValues = {}\n    Object.entries(this.values).forEach(([otherValuesKey, value]) => {\n      if (otherValuesKey !== key) {\n        otherValues[otherValuesKey] = value\n      }\n    })\n    return otherValues\n  }\n\n  /** @param key {string} Асинхронно запускает валидацию*/\n  validateByKey = async (key) => {\n    this.errors[key] = null\n    const validatorsForValue = this.validators[key]\n    if (!!validatorsForValue && !!Array.isArray(validatorsForValue)) {\n      validatorsForValue.some((validator) => {\n        const value = this.values[key]\n        const error = validator(\n          value,\n          this.getValuesExcludeByKey(key)\n        )\n        if (error) this.errors[key] = error\n        return !!error\n      })\n    }\n  }\n\n  /**   Заглядывает в каждое правило валидации и если встречает ошибку возвращает false, если нигде не встречает ошибки возвращает true\n   * @return {boolean} */\n  get isValid() {\n    const hasErrors = !Object.entries(this.validators).some(\n      ([key, validators]) =>\n        Array.isArray(validators)\n          ? validators.some((validator) =>\n              typeof validator === 'function'\n                ? !!validator(\n                    this.values[key],\n                    this.getValuesExcludeByKey(key)\n                  )\n                : false\n            )\n          : false\n    )\n    return hasErrors\n  }\n}\n","import { makeAutoObservable } from 'mobx'\nimport { FormStore } from '../../../../utils/FormStore/FormStore'\n\nexport class SntListFilterStore {\n  isActive = false\n\n  typeVariants = ['all', 'avio', 'auto']\n\n  form = new FormStore({\n    search: '',\n    senderCity: '',\n    senderFio: '',\n    senderPhone: '',\n    receiverCity: '',\n    receiverFio: '',\n    receiverPhone: '',\n    readyToInput: false,\n    type: this.typeVariants[0],\n  })\n\n  constructor(getItems) {\n    this.getItems = () => getItems()\n    makeAutoObservable(this)\n  }\n\n  setIsActive = (bool) => {\n    this.isActive = bool\n  }\n\n  toggleActive = () => {\n    this.setIsActive(!this.isActive)\n  }\n\n  setType = (value) => {\n    this.form.changeValue(value, 'type')\n    this.getItems()\n  }\n}\n","import { makeAutoObservable } from 'mobx'\n\nexport const sortingColumns = [\n  'dateCreation',\n  'internetShopNumber',\n  'cityFrom',\n  'planingDepartureDate',\n  'transportNumber',\n]\n\nexport class SntListSortingStore {\n  sortBy = null\n  sortDirectionReverse = false\n\n  constructor(getItems) {\n    this.getItems = () => getItems()\n    makeAutoObservable(this)\n  }\n\n  setSortBy = (columnName) => {\n    if (columnName === this.sortBy) {\n      this.sortDirectionReverse = !this.sortDirectionReverse\n    } else {\n      this.sortBy = columnName\n      this.sortDirectionReverse = false\n    }\n    this.getItems()\n  }\n\n  reset() {\n    this.sortBy = null\n    this.sortDirectionReverse = false\n  }\n}\n","import { makeAutoObservable } from 'mobx'\n\nexport class SntNumberInputStore {\n  value = ''\n  numberSntEditRequired = false\n  numberSntMessage = ''\n  id = ''\n  isLoading = false\n  isSaveComplete = false\n  error = null\n\n  constructor(form) {\n    if (form) {\n      this.value = form.numberSnt || ''\n      this.numberSntEditRequired = form.numberSntEditRequired\n      this.numberSntMessage = form.numberSntMessage\n      this.id = form.number\n    }\n    makeAutoObservable(this)\n  }\n\n  onChangeValue = (str) => {\n    this.value = str\n    this.startSaveAfterDelay()\n  }\n\n  startSaveAfterDelay = (delay = 2000) => {\n    clearTimeout(this.saveTimeout)\n    this.saveTimeout = setTimeout(() => {\n      this.saveValue()\n    }, delay)\n  }\n\n  changeIsLoading = (bool) => {\n    this.isLoading = bool\n  }\n\n  saveValue = () => {\n    console.log('save value')\n    this.changeIsLoading(true)\n    clearTimeout(this.saveTimeout)\n    this.error = null\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        if (Math.random() > 0.5) {\n          this.isSaveComplete = true\n        } else {\n          this.isSaveComplete = false\n          this.error = 'Чето пошло не так исправь!!!1111'\n        }\n        this.changeIsLoading(false)\n\n        resolve()\n      }, Math.random() * 1000 * 3)\n    })\n  }\n}\n","import { makeAutoObservable } from 'mobx'\nimport { SntNumberInputStore } from './SntNumberInputStore/SntNumberInputStore'\n\nexport class SntListItemStore {\n  number\n  dateCreation\n  internetShopNumber\n  cityFrom\n  cityTo\n  planingDepartureDate\n  transportType\n  transportNumber\n  driverName\n\n  constructor(form) {\n    Object.keys(form).forEach((key) => {\n      this[key] = form[key]\n    })\n    this.snt = new SntNumberInputStore(form)\n    makeAutoObservable(this)\n  }\n\n  onChangeNumberSnt = (value) => {\n    this.numberSnt = value\n  }\n}\n","import { makeAutoObservable } from 'mobx'\nimport { SntListItemStore } from './SntListItemStore/SntListItemStore'\n\nexport class SntListStore {\n  items = []\n\n  constructor() {\n    makeAutoObservable(this)\n  }\n\n  addItem = (obj) => {\n    this.items.push(new SntListItemStore(obj))\n  }\n\n  setItems = (array) => {\n    array.forEach((element) => {\n      this.addItem(element)\n    })\n  }\n\n  reset = () => {\n    this.items = []\n  }\n}\n","import { makeAutoObservable } from 'mobx'\nimport { SntListFilterStore } from './SntListFilterStore/SntListFilterStore'\nimport { SntListSortingStore } from './SntListSortingStore/SntListSortingStore'\nimport { SntListStore } from './SntListStore/SntListStore'\n\nexport class SntPageStore {\n  isLoading = false\n\n  constructor() {\n    this.list = new SntListStore()\n    this.filter = new SntListFilterStore(() => this.getItems())\n    this.sorting = new SntListSortingStore(() => this.getItems())\n    makeAutoObservable(this)\n  }\n\n  init = () => {\n    this.getItems()\n  }\n\n  getItems = () => {\n    this.list.reset()\n    this.fetchItems().then((items) => {\n      this.list.setItems(items)\n    })\n  }\n\n  fetchItems = async () => {\n    this.isLoading = true\n    const generateItem = () => {\n      return {\n        number: Math.random() * 1000000,\n        dateCreation: new Date(),\n        internetShopNumber: Math.random() * 1000000,\n        cityFrom: 'Санкт-Петербург',\n        cityTo: 'Воронеж',\n        planingDepartureDate: new Date(),\n        transportType: 'auto',\n        transportNumber: Math.random() > 0.3 ? 'А981BH761' : null,\n        driverName:\n          Math.random() > 0.3 ? 'Золотарев Максим Семенович' : null,\n        numberSnt:\n          Math.random() > 0.5\n            ? '45g-45g-45-g42-g-4h55jq--35--hqhq34'\n            : null,\n        numberSntEditRequired: Math.random() > 0.5,\n        numberSntMessage: 'Необходимо обновить номер СНТ',\n      }\n    }\n    const list = Array.from({ length: 10 }, generateItem)\n\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        this.isLoading = false\n        resolve(list)\n      }, Math.random() * 1000 * 3)\n    })\n  }\n\n  reset = () => {}\n\n  getMore = () => {\n    return this.fetchItems().then((items) => {\n      this.list.setItems(items)\n    })\n  }\n}\n","import React from 'react'\n\nimport styles from './styles.module.scss'\n\nconst Divider = () => {\n  return <div className={styles.divider}></div>\n}\n\nexport default Divider\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  var _state$entry;\n\n  const [ref, setRef] = React.useState(null);\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView,\n    entry: undefined\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(() => {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    let unobserve = observe(ref, (inView, entry) => {\n      setState({\n        inView,\n        entry\n      });\n      if (callback.current) callback.current(inView, entry);\n\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root,\n      rootMargin,\n      threshold,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n    return () => {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  const entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n","import {\n  SpinnerSize,\n  SpinnerStyle,\n} from '@cdek/react-uikit/lib/esm/components/Spinner/Spinner'\n\nimport { Spinner } from '@cdek/react-uikit'\nimport { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport styles from './LoaderOrGetMore.module.scss'\n\nconst LoaderOrGetMore = (props) => {\n  const { ref } = useInView({\n    threshold: 0.5,\n    async onChange(view) {\n      if (view && !props.isLoading && props.getMoreCallback) {\n        setTimeout(() => {\n          props.getMoreCallback()\n        }, 500)\n      }\n    },\n  })\n\n  return props.isLoading ? (\n    <div className={styles.loader}>\n      <Spinner size={SpinnerSize.Md} color={SpinnerStyle.Primary} />\n    </div>\n  ) : (\n    <div ref={ref} className={styles.loader}></div>\n  )\n}\n\nLoaderOrGetMore.propTypes = {\n  getMoreCallback: PropTypes.func,\n  isLoading: PropTypes.bool,\n}\nLoaderOrGetMore.displayName = 'LoaderOrGetMore'\nexport default observer(LoaderOrGetMore)\n","import { IconCopy } from '@cdek/react-uikit'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { observer } from 'mobx-react-lite'\nimport styles from './CopyButton.module.scss'\nimport { useTranslation } from 'react-i18next'\n\nconst CopyButton = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <button\n      className={styles.button}\n      title={t(`snt.copyToClipboard`)}\n      onClick={() => {\n        navigator.clipboard.writeText(props.value)\n      }}\n    >\n      <IconCopy />\n    </button>\n  )\n}\n\nCopyButton.propTypes = {\n  value: PropTypes.string,\n}\nCopyButton.displayName = 'CopyButton'\nexport default observer(CopyButton)\n","import { IconCheck, Input, Spinner } from '@cdek/react-uikit'\n\nimport classNames from 'classnames'\nimport { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport styles from './SntNumberInput.module.scss'\n\nconst SntNumberInput = (props) => {\n  const { t } = useTranslation()\n  return (\n    <Input\n      className={classNames(styles.input, props.className)}\n      value={props.value}\n      onChange={(e) => {\n        props.onChangeValue(e.target.value)\n      }}\n      disabled={!props.numberSntEditRequired || props.isLoading}\n      placeholder={t(`snt.enterNumber`)}\n      hideClearButton\n      onKeyPress={(e) => {\n        if (e.key === 'Enter') {\n          props.saveValue()\n        }\n      }}\n      messageError={props.error}\n      isInvalid={!!props.error}\n      iconRight={\n        props.isLoading ? (\n          <Spinner />\n        ) : props.isSaveComplete ? (\n          <IconCheck />\n        ) : undefined\n      }\n    />\n  )\n}\n\nSntNumberInput.propTypes = {\n  value: PropTypes.string,\n  className: PropTypes.string,\n  error: PropTypes.string,\n  onChangeValue: PropTypes.func,\n  saveValue: PropTypes.func,\n  numberSntEditRequired: PropTypes.bool,\n  isLoading: PropTypes.bool,\n  isSaveComplete: PropTypes.bool,\n}\nSntNumberInput.displayName = 'SntNumberInput'\nexport default observer(SntNumberInput)\n","import IconArrowBold from '@cdek/react-uikit/lib/esm/components/Icons/ArrowBold/IconArrowBold'\nimport classNames from 'classnames'\nimport { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport styles from './TableSortButton.module.scss'\n\nconst TableSortButton = (props) => {\n  return (\n    <button className={styles.button} {...props}>\n      <div className={styles.left}>{props.children}</div>\n      {props.isSorted ? (\n        <div\n          className={classNames(\n            styles.right,\n            props.isSortedRevers ? styles.rightReverse : null\n          )}\n        >\n          <IconArrowBold />\n        </div>\n      ) : null}\n    </button>\n  )\n}\n\nTableSortButton.propTypes = {\n  children: PropTypes.node,\n  isSorted: PropTypes.bool,\n  isSortedRevers: PropTypes.bool,\n}\nTableSortButton.displayName = 'TableSortButton'\nexport default observer(TableSortButton)\n","import {\n  SntListSortingStore,\n  sortingColumns,\n} from '../../../../../store/international/sntPageStore/SntListSortingStore/SntListSortingStore'\n\nimport { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { SntListItemStore } from '../../../../../store/international/sntPageStore/SntListStore/SntListItemStore/SntListItemStore'\nimport CopyButton from '../../../../common/CopyButton/CopyButton'\nimport Table from '../../../../common/Table/Table'\nimport SntNumberInput from '../SntNumberInput/SntNumberInput'\nimport styles from './SntListDesktop.module.scss'\nimport TableSortButton from './TableSortButton/TableSortButton'\n\nexport const sntListKeys = [\n  'numberAndDateCreation',\n  'imShopNumber',\n  'fromTo',\n  'departureTime',\n  'transport',\n  'sntNumber',\n]\n\nconst SntListDesktop = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <div className={styles.block}>\n      <Table\n        columns={[\n          {\n            key: sntListKeys[0],\n            label: (\n              <TableSortButton\n                onClick={() => {\n                  props.sorting.setSortBy(sortingColumns[0])\n                }}\n                isSorted={[sortingColumns[0]].includes(\n                  props.sorting.sortBy\n                )}\n                isSortedRevers={props.sorting.sortDirectionReverse}\n              >\n                {t(`snt.tableColumns.${sntListKeys[0]}`)}\n              </TableSortButton>\n            ),\n          },\n          {\n            key: sntListKeys[1],\n            label: (\n              <TableSortButton\n                onClick={() => {\n                  props.sorting.setSortBy(sortingColumns[1])\n                }}\n                isSorted={[sortingColumns[1]].includes(\n                  props.sorting.sortBy\n                )}\n                isSortedRevers={props.sorting.sortDirectionReverse}\n              >\n                {t(`snt.tableColumns.${sntListKeys[1]}`)}\n              </TableSortButton>\n            ),\n          },\n          {\n            key: sntListKeys[2],\n            label: (\n              <TableSortButton\n                onClick={() => {\n                  props.sorting.setSortBy(sortingColumns[2])\n                }}\n                isSorted={[sortingColumns[2]].includes(\n                  props.sorting.sortBy\n                )}\n                isSortedRevers={props.sorting.sortDirectionReverse}\n              >\n                {t(`snt.tableColumns.${sntListKeys[2]}`)}\n              </TableSortButton>\n            ),\n          },\n          {\n            key: sntListKeys[3],\n            label: (\n              <TableSortButton\n                onClick={() => {\n                  props.sorting.setSortBy(sortingColumns[3])\n                }}\n                isSorted={[sortingColumns[3]].includes(\n                  props.sorting.sortBy\n                )}\n                isSortedRevers={props.sorting.sortDirectionReverse}\n              >\n                {t(`snt.tableColumns.${sntListKeys[3]}`)}\n              </TableSortButton>\n            ),\n          },\n          {\n            key: sntListKeys[4],\n            label: (\n              <TableSortButton\n                onClick={() => {\n                  props.sorting.setSortBy(sortingColumns[4])\n                }}\n                isSorted={[sortingColumns[4]].includes(\n                  props.sorting.sortBy\n                )}\n                isSortedRevers={props.sorting.sortDirectionReverse}\n              >\n                {t(`snt.tableColumns.${sntListKeys[4]}`)}\n              </TableSortButton>\n            ),\n          },\n          {\n            key: sntListKeys[5],\n            label: (\n              <TableSortButton>\n                {t(`snt.tableColumns.${sntListKeys[5]}`)}\n              </TableSortButton>\n            ),\n          },\n        ]}\n        data={props.items?.map((item) => {\n          return {\n            [sntListKeys[0]]: (\n              <div>\n                <div>\n                  {new Date(item.dateCreation).toLocaleDateString()}\n                </div>\n                <div>{item.number}</div>\n              </div>\n            ),\n            [sntListKeys[1]]: item.internetShopNumber,\n            [sntListKeys[2]]: [item.cityFrom, item.cityTo]\n              .filter(Boolean)\n              .join(' - '),\n            [sntListKeys[3]]: [\n              new Date(\n                item.planingDepartureDate\n              ).toLocaleDateString(),\n              new Date(\n                item.planingDepartureDate\n              ).toLocaleTimeString(),\n            ]\n              .filter(Boolean)\n              .join(' '),\n            [sntListKeys[4]]:\n              item.transportNumber || item.driverName ? (\n                <div className={styles.transport}>\n                  <div>\n                    <div>{item.transportNumber}</div>\n                    <div>{item.driverName}</div>\n                  </div>\n                  <CopyButton\n                    value={[item.transportNumber, item.driverName]\n                      .filter(Boolean)\n                      .join(' ')}\n                  />\n                </div>\n              ) : (\n                '...'\n              ),\n            [sntListKeys[5]]: <SntNumberInput {...item.snt} />,\n          }\n        })}\n      />\n    </div>\n  )\n}\n\nSntListDesktop.propTypes = {\n  children: PropTypes.node,\n  items: PropTypes.arrayOf(PropTypes.instanceOf(SntListItemStore)),\n  sorting: PropTypes.instanceOf(SntListSortingStore),\n}\nSntListDesktop.displayName = 'SntListDesktop'\nexport default observer(SntListDesktop)\n","import { Typography, Widget } from '@cdek/react-uikit'\nimport {\n  BodyVariant,\n  CaptionVariant,\n} from '@cdek/react-uikit/lib/esm/components/Typography/Typography'\n\nimport { WidgetSize } from '@cdek/react-uikit/lib/esm/components/Widget/Widget'\nimport { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useTranslation } from 'react-i18next'\nimport { SntListItemStore } from '../../../../../store/international/sntPageStore/SntListStore/SntListItemStore/SntListItemStore'\nimport CopyButton from '../../../../common/CopyButton/CopyButton'\nimport SntNumberInput from '../SntNumberInput/SntNumberInput'\nimport styles from './SntListMobile.module.scss'\n\nconst SntListMobile = (props) => {\n  const { t } = useTranslation()\n\n  return (\n    <div className={styles.list}>\n      {props.items?.map((item, idx) => (\n        <Widget\n          className={styles.item}\n          key={idx}\n          size={WidgetSize.Size2}\n        >\n          <div className={styles.body}>\n            <div className={styles.header}>\n              <Typography\n                className={styles.headerValue}\n                type={CaptionVariant.Caption1}\n              >\n                {item.number}\n              </Typography>\n              <Typography\n                className={styles.headerValue}\n                type={CaptionVariant.Caption1}\n              >\n                {new Date(item.dateCreation).toLocaleDateString()}\n              </Typography>\n            </div>\n            <div>\n              <Typography type={BodyVariant.Body2}>\n                {[item.cityFrom, item.cityTo].join(' → ')}\n              </Typography>\n            </div>\n            <div className={styles.row}>\n              <div className={styles.rowLeft}>\n                <Typography\n                  className={styles.label}\n                  type={CaptionVariant.Caption1}\n                >\n                  {t(`snt.tableColumns.imShopNumber`)}\n                </Typography>\n                <Typography\n                  className={styles.value}\n                  type={BodyVariant.Body2}\n                >\n                  {item.internetShopNumber}\n                </Typography>\n              </div>\n            </div>\n            <div className={styles.row}>\n              <div className={styles.rowLeft}>\n                <Typography\n                  className={styles.label}\n                  type={CaptionVariant.Caption1}\n                >\n                  {t(`snt.tableColumns.departureTime`)}\n                </Typography>\n                <Typography\n                  className={styles.value}\n                  type={BodyVariant.Body2}\n                >\n                  {[\n                    new Date(\n                      item.planingDepartureDate\n                    ).toLocaleDateString(),\n                    new Date(\n                      item.planingDepartureDate\n                    ).toLocaleTimeString(),\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                </Typography>\n              </div>\n            </div>\n            <div className={styles.row}>\n              <div className={styles.rowLeft}>\n                <Typography\n                  className={styles.label}\n                  type={CaptionVariant.Caption1}\n                >\n                  {t(`snt.tableColumns.transport`)}\n                </Typography>\n                <Typography\n                  className={styles.value}\n                  type={BodyVariant.Body2}\n                >\n                  {item.transportNumber || '...'}\n                </Typography>\n                <Typography\n                  className={styles.value}\n                  type={BodyVariant.Body2}\n                >\n                  {item.driverName || '...'}\n                </Typography>\n              </div>\n              <CopyButton\n                value={[item.transportNumber, item.driverName]\n                  .filter(Boolean)\n                  .join(' ')}\n              />\n            </div>\n            <div className={styles.row}>\n              <div className={styles.rowLeft}>\n                <Typography\n                  className={styles.label}\n                  type={CaptionVariant.Caption1}\n                >\n                  {t(`snt.tableColumns.sntNumber`)}\n                </Typography>\n                {item.snt.numberSntEditRequired ? (\n                  <SntNumberInput\n                    {...item.snt}\n                    className={styles.input}\n                  />\n                ) : (\n                  <Typography\n                    className={styles.value}\n                    type={BodyVariant.Body2}\n                  >\n                    {t(`snt.informationShowLater`)}\n                  </Typography>\n                )}\n              </div>\n            </div>\n          </div>\n        </Widget>\n      ))}\n    </div>\n  )\n}\nSntListMobile.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.instanceOf(SntListItemStore)),\n}\nSntListMobile.displayName = 'SntListMobile'\nexport default observer(SntListMobile)\n","import { observer } from 'mobx-react-lite'\nimport PropTypes from 'prop-types'\nimport React from 'react'\nimport { useMediaQuery } from 'react-responsive'\nimport SntListDesktop from './SntListDesktop/SntListDesktop'\nimport SntListMobile from './SntListMobile/SntListMobile'\n\nconst SntList = (props) => {\n  const isMobile = useMediaQuery({\n    query: `(max-width: ${600}px)`,\n  })\n\n  return isMobile ? (\n    <SntListMobile {...props} />\n  ) : (\n    <SntListDesktop {...props} />\n  )\n}\n\nexport const sntListProps = {\n  items: PropTypes.arrayOf(PropTypes.shape({})),\n}\n\nSntList.propTypes = sntListProps\nSntList.displayName = 'SntList'\nexport default observer(SntList)\n","import React, { useEffect } from 'react'\n\nimport { Typography } from '@cdek/react-uikit'\nimport { HeadlineVariant } from '@cdek/react-uikit/lib/esm/components/Typography/Typography'\nimport { observer } from 'mobx-react-lite'\nimport { useTranslation } from 'react-i18next'\nimport { SntPageStore } from '../../../store/international/sntPageStore/SntPageStore'\nimport Divider from '../../common/Divider'\nimport LoaderOrGetMore from './LoaderOrGetMore/LoaderOrGetMore'\nimport SntHeaderTooltip from './SntHeaderTooltip/SntHeaderTooltip'\nimport SntList from './SntList/SntList'\nimport SntListFilter from './SntListFilter/SntListFilter'\nimport styles from './SntPage.module.scss'\n\n// https://www.figma.com/file/XRSNDceNFRRLNpufS6R9xE/%D0%A1%D0%BF%D0%B8%D1%81%D0%BE%D0%BA-%D0%B7%D0%B0%D0%BA%D0%B0%D0%B7%D0%BE%D0%B2?type=design&node-id=3207-85676&t=bA9CNEmE8KnuTTkx-4\n\nconst store = new SntPageStore()\n\nconst SntPage = () => {\n  const { t } = useTranslation()\n\n  useEffect(() => {\n    store.init()\n    return () => store.reset()\n  }, [])\n\n  return (\n    <div className={styles.block}>\n      <Typography type={HeadlineVariant.H4}>\n        {t(`snt.header`)} <SntHeaderTooltip />\n      </Typography>\n      <Divider />\n      <SntListFilter {...store.filter} />\n      <SntList items={store.list.items} sorting={store.sorting} />\n      <LoaderOrGetMore\n        isLoading={store.isLoading}\n        getMoreCallback={store.getMore}\n      />\n    </div>\n  )\n}\n\nSntPage.displayName = 'SntPage'\nexport default observer(SntPage)\n"],"names":["FormStore","initialValues","validators","__publicField","value","key","obj","keys","k","otherValues","otherValuesKey","validatorsForValue","validator","error","makeAutoObservable","SntListFilterStore","getItems","bool","sortingColumns","SntListSortingStore","columnName","SntNumberInputStore","form","str","delay","resolve","SntListItemStore","SntListStore","array","element","SntPageStore","items","generateItem","list","Divider","jsx","styles","observerMap","RootIds","rootId","unsupportedValue","getRootId","root","optionsToId","options","createObserver","id","instance","elements","thresholds","observer","entries","entry","_elements$get","inView","threshold","callback","observe","fallbackInView","bounds","callbacks","useInView","trackVisibility","rootMargin","triggerOnce","skip","initialInView","onChange","_state$entry","ref","setRef","React.useState","React.useRef","state","setState","React.useEffect","unobserve","entryTarget","result","LoaderOrGetMore","props","view","Spinner","SpinnerSize","SpinnerStyle","PropTypes","LoaderOrGetMore$1","CopyButton","t","useTranslation","IconCopy","CopyButton$1","SntNumberInput","Input","classNames","e","IconCheck","SntNumberInput$1","TableSortButton","IconArrowBold","TableSortButton$1","sntListKeys","SntListDesktop","Table","_a","item","jsxs","SntListDesktop$1","SntListMobile","idx","Widget","WidgetSize","Typography","CaptionVariant","BodyVariant","SntListMobile$1","SntList","useMediaQuery","sntListProps","SntList$1","store","SntPage","useEffect","HeadlineVariant","SntHeaderTooltip","SntListFilter","Page"],"mappings":"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","x_google_ignoreList":[8]}